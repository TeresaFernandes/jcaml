
//////////////////
//	Problema 1	//
//////////////////
let pow = function(x:int) -> x*x;

let problema1 = function (x:int, y:int,c:int) -> 
	pow(x) - y + c;
	

//////////////////
//	Problema 2	//
//////////////////
let problema2_intervalo1 = function (x:int) -> 
	if x>=0 then 
		if x<=25 then true
		else false
	else false;
	
let problema2_intervalo2 = function (x:int) ->
	if x>=26 then 
		if x<=50 then true
		else false
	else false;
	
let problema2_intervalo3 = function (x:int) ->
	if x>=51 then 
		if x<=75 then true
		else false
	else false;
	
let problema2_intervalo4 = function (x:int) ->
	if x>=76 then 
		if x<=100 then true
		else false
	else false;
	
		
	

//////////////////
//	Problema 3	//
//////////////////

//multiplica todos elementos de uma lista
let mult_elementos = function (ll1:list)->

	match length(ll1) with
	 0 -> 1.0
	|_ ->	get(0,ll1) *. mult_elementos_(removeFirst(ll1));

		
//retorna um lista, na qual cada elemento corresponde a soma dos elementos respectivos das duas listas recebidas como parametro
let sum_elementos_duas_listas_aux = function (l1:list,l2:list,len:int,i:int)->
		if length(l1)==0  then
			createList(len)
		else
			set(i ,  sum_elementos_duas_listas_aux(removeFirst(l1),removeFirst(l2),len,i+1), get(0,l1) + get(0,l2));
		
//retorna um lista, na qual cada elemento corresponde o produto dos elementos respectivos das duas listas recebidas como parametro
let mult_elementos_duas_listas_aux = function (l1:list,l2:list,len:int, i:int)->
		if length(l1)==0  then
			createList(len)
		else
			set(i ,  mult_elementos_duas_listas_aux(removeFirst(l1),removeFirst(l2),len,i+1), get(0,l1) * get(0,l2));
	
let sum_elementos_duas_listas = function (l1:list,l2:list) ->
	if length(l1) == length(l2) then
		sum_elementos_duas_listas_aux (l1,l2,length(l1),0)
	else
		print("invalid list sum");
		
let mult_elementos_duas_listas = function (l1:list,l2:list) ->
	if length(l1) == length(l2) then
		mult_elementos_duas_listas_aux (l1,l2,length(l1),0)
	else
		print("invalid list mult");

let sum_matrizes_aux = function(l1:list,l2:list,len:int,i:int) ->
		if length(l1)==0  then
			createList(len)
		else
			set(i ,  sum_matrizes_aux(removeFirst(l1),removeFirst(l2),len,i+1), sum_elementos_duas_listas(get(0,l1),get(0,l2)));
	
let sum_matrizes =  function(l1:list,l2:list) ->
	if length(l1) == length(l2) then
		sum_matrizes_aux(l1,l2,length(l1),0)
	else
		print ("invalid matrix sum");

let mult_matrizes_aux = function(l1:list,l2:list,len:int,i:int) ->
		//coisas
			createList(len);
	
let mult_matrizes = function(l1:list,l2:list) ->
	if length(l1) == length(l2) then
		mult_matrizes_aux(l1,l2,length(l1),0)
	else
		print ("invalid matrix mult");


let lista1 = [12,23,3,40,5];
let lista2 = [1,2,3,4,5];
//let multi = mult_elementos_duas_listas(lista1,lista2);
//let soma = sum_elementos_duas_listas(lista1,lista2);

let ll1 = [[1,2],[3,4]];
let ll2 = [[1,2],[3,4]];
//let soma_mat = sum_matrizes(ll1,ll2,length(ll1),0);

//////////////////
//	Problema 4	//
//////////////////
type rational_t = { numerador:int, denominador:int };

let problema4_a = function(a:int,b:int) ->
	if b<>0 then
		rational_t(a,b)
	else
		print("b==0");


let problema4_b = function(v1:custom,v2:custom) ->
	if v1.numerador==v2.numerador then 
		v1.denominador==v2.denominador
	else false;
	
let var1 = rational_t(2,2);
let var2 = rational_t(2,2);
problema4_b(var1,var2);

let problema4_c_mul = function (v1:custom,v2:custom) ->
	problema4_a(v1.numerador*v2.numerador,v1.denominador*v2.denominador);
	
let problema4_c_div = function (v1:custom,v2:custom) ->
	problema4_a(v1.numerador*v2.denominador,v1.denominador*v2.numerador);

let problema4_c_inv = function (v1:custom) ->
	problema4_a(v1.denominador,v1.numerador);

let problema4_c_neg = function (v1:custom) ->
	problema4_a(0-v1.numerador,v1.denominador);

let aux = function (x:int,y:int) -> x*y;
let problema4_c_soma = function (v1:custom, v2:custom) ->
	rational_t(aux(v1.numerador,v2.denominador) + aux(v1.denominador,v2.numerador),v1.denominador*v2.denominador);

let problema4_c_sub = function (v1:custom, v2:custom) ->
	rational_t(aux(v1.numerador,v2.denominador) - aux(v1.denominador,v2.numerador),v1.denominador*v2.denominador);


//////////////////
//	Problema 5	//
//////////////////
let resto_div = function (x:int,y:int) -> x % y;
let mdc = function(n:int,m:int) ->
	if resto_div(m,n)==0 then n
	else if resto_div(n,m)==0 then m
	else if m>n then mdc(n,m%n)
	else mdc(n%m,m);


